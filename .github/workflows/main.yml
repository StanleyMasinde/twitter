name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  BINARY_NAME: twitter

jobs:
  generate-changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install git-cliff
        uses: kenji-miyake/setup-git-cliff@v2

      - name: Generate CHANGELOG.md
        id: changelog
        shell: bash
        run: |
          set -euo pipefail
          # Generate full changelog; git-cliff detects the latest tag context.
          git cliff --latest --output CHANGELOG.md >/dev/null
          {
            echo "changelog<<EOF"
            cat CHANGELOG.md
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Upload changelog artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md
          if-no-files-found: error
          retention-days: 7

  build:
    name: Build ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-x64
            archive_ext: tar.gz
          - target: x86_64-apple-darwin
            os: macos-13
            name: darwin-x64
            archive_ext: tar.gz
          - target: aarch64-apple-darwin
            os: macos-14
            name: darwin-arm64
            archive_ext: tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x64
            archive_ext: zip

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install musl tools (Linux MUSL only)
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build release
        shell: bash
        run: |
          set -euo pipefail
          cargo build --locked --release --target "${{ matrix.target }}"

      - name: Package
        id: package
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${GITHUB_REF#refs/tags/}"
          TARGET_DIR="target/${{ matrix.target }}/release"

          if [[ "${{ runner.os }}" == "Windows" ]]; then
           BIN="${TARGET_DIR}/${BINARY_NAME}.exe"
          else
          BIN="${TARGET_DIR}/${BINARY_NAME}"
          fi

          test -f "$BIN" || { echo "Binary missing: $BIN"; exit 1; }

          ARCHIVE="${BINARY_NAME}-${{ matrix.name }}.${{ matrix.archive_ext }}"
          STAGE="$(mktemp -d)"
          install -m 0755 "$BIN" "$STAGE/$(basename "$BIN")"

          if [[ "${{ runner.os }}" == "Windows" ]]; then
           7z a "$ARCHIVE" "$STAGE"/*
          else
          tar -C "$STAGE" -czf "$ARCHIVE" .
          fi

          echo "archive=$ARCHIVE" >> "$GITHUB_OUTPUT"

      - name: Upload packaged artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.archive }}
          path: ${{ steps.package.outputs.archive }}
          if-no-files-found: error
          retention-days: 7

  release:
    name: Create release
    needs: [generate-changelog, build]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract changelog for release body
        id: get-changelog
        shell: bash
        run: |
          set -euo pipefail
          CHANGELOG_PATH="artifacts/changelog/CHANGELOG.md"
          test -f "$CHANGELOG_PATH" || { echo "Missing changelog artifact"; exit 1; }
          {
            echo "changelog<<EOF"
            cat "$CHANGELOG_PATH"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: List artifacts
        run: find artifacts -type f -maxdepth 2 -name "*.tar.gz" -print

      - name: Check for GPG key
        id: check_gpg
        run: |
          if [ -n "${{ secrets.GPG_PRIVATE_KEY }}" ]; then
            echo "has_gpg_key=true" >> $GITHUB_OUTPUT
          else
            echo "has_gpg_key=false" >> $GITHUB_OUTPUT
          fi

      - name: Import GPG key
        if: steps.check_gpg.outputs.has_gpg_key == 'true'
        shell: bash
        run: |
          set -euo pipefail
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --yes --import
          # Set up gnupg directory permissions
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          # Use loopback pinentry to allow non-interactive signing
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          chmod 600 ~/.gnupg/gpg.conf

      - name: Generate SHA256SUMS and signatures
        if: steps.check_gpg.outputs.has_gpg_key == 'true'
        shell: bash
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          set -euo pipefail
          cd artifacts
          # One combined checksums file is friendlier for users
          find . -type f -name "*.tar.gz" -print0 | xargs -0 -I{} sha256sum "{}" > SHA256SUMS
          # Sign the checksum file (armoured detached signature)
          echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --armor --detach-sign SHA256SUMS

          # Also sign each archive individually (optional but nice)
          while IFS= read -r -d '' f; do
            echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --armor --detach-sign "$f"
          done < <(find . -type f -name "*.tar.gz" -print0)

      - name: Generate SHA256SUMS without signatures
        if: steps.check_gpg.outputs.has_gpg_key != 'true'
        shell: bash
        run: |
          set -euo pipefail
          cd artifacts
          # One combined checksums file is friendlier for users
          find . -type f -name "*.tar.gz" -print0 | xargs -0 -I{} sha256sum "{}" > SHA256SUMS

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          body: ${{ steps.get-changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
